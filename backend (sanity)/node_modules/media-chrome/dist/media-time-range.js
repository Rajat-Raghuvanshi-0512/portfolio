import g from"./media-chrome-range.js";import{defineCustomElement as b}from"./utils/defineCustomElement.js";import{Window as r,Document as v}from"./utils/server-safe-globals.js";import"./media-thumbnail-preview-element.js";import{mediaUIEvents as d}from"./media-chrome-html-element.js";const l=v.createElement("template");l.innerHTML=`
  <style>
    #thumbnailContainer {
      display: none;
      position: absolute;
      top: 0;
    }

    media-thumbnail-preview {
      position: absolute;
      bottom: 10px;
      border: 2px solid #fff;
      border-radius: 2px;
      background-color: #000;
      width: 160px;
      height: 90px;

      /* Negative offset of half to center on the handle */
      margin-left: -80px;
    }

    /* Can't get this working. Trying a downward triangle. */
    /* media-thumbnail-preview::after {
      content: "";
      display: block;
      width: 300px;
      height: 300px;
      margin: 100px;
      background-color: #ff0;
    } */

    :host([media-preview-image]:hover) #thumbnailContainer {
      display: block;
      animation: fadeIn ease 0.5s;
    }

    @keyframes fadeIn {
      0% {
        /* transform-origin: bottom center; */
        /* transform: scale(0.7); */
        margin-top: 10px;
        opacity: 0;
      }
      100% {
        /* transform-origin: bottom center; */
        /* transform: scale(1); */
        margin-top: 0;
        opacity: 1;
      }
    }
  </style>
  <div id="thumbnailContainer">
    <media-thumbnail-preview></media-thumbnail-preview>
  </div>
`;class h extends g{static get observedAttributes(){return["thumbnails"].concat(super.observedAttributes||[])}constructor(){super();this.shadowRoot.appendChild(l.content.cloneNode(!0)),this.setMediaTimeWithRange=()=>{const e=Math.round(this.range.value/1e3*this.mediaDuration);this.dispatchMediaEvent(d.MEDIA_SEEK_REQUEST,{detail:e})},this.range.addEventListener("input",this.setMediaTimeWithRange),this.updateRangeWithMediaTime=()=>{this.range.value=Math.round(this.mediaCurrentTime/this.mediaDuration*1e3),this.updateBar()},this.enableThumbnails()}mediaCurrentTimeSet(e){this.updateRangeWithMediaTime()}mediaDurationSet(e){this.updateRangeWithMediaTime()}mediaBufferedSet(e){this.updateBar()}getBarColors(){let e=super.getBarColors();if(!this.mediaBuffered||!this.mediaBuffered.length||this.mediaDuration<=0)return e;const i=this.mediaBuffered,o=i[i.length-1][1]/this.mediaDuration*100;return e.splice(1,0,["var(--media-time-buffered-color, #777)",o]),e}enableThumbnails(){this.thumbnailPreview=this.shadowRoot.querySelector("media-thumbnail-preview");const e=this.shadowRoot.querySelector("#thumbnailContainer");e.classList.add("enabled");let i;const o=()=>{i=m=>{const a=this.mediaDuration;if(!a)return;const t=this.range.getBoundingClientRect();let n=(m.clientX-t.left)/t.width;n=Math.max(0,Math.min(1,n));const c=t.left-this.getBoundingClientRect().left,p=c+n*t.width;this.thumbnailPreview.style.left=`${p}px`,this.dispatchMediaEvent(d.MEDIA_PREVIEW_REQUEST,{detail:n*a})},r.addEventListener("mousemove",i,!1)},u=()=>{r.removeEventListener("mousemove",i)};let s=!1,f=m=>{if(!s&&this.mediaDuration){s=!0,this.thumbnailPreview.style.display="block",o();let a=t=>{t.target!=this&&!this.contains(t.target)&&(this.thumbnailPreview.style.display="none",r.removeEventListener("mousemove",a),s=!1,u())};r.addEventListener("mousemove",a,!1)}this.mediaDuration||(this.thumbnailPreview.style.display="none")};this.addEventListener("mousemove",f,!1)}}b("media-time-range",h);export default h;
