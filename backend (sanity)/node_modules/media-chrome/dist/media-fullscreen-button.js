import i from"./media-chrome-button.js";import{defineCustomElement as m}from"./utils/defineCustomElement.js";import{Document as t}from"./utils/server-safe-globals.js";import{mediaUIEvents as s}from"./media-chrome-html-element.js";const r=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
  <path d="M0 0h24v24H0z" fill="none"/>
  <path class="icon" d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>
</svg>`,h=`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
  <path d="M0 0h24v24H0z" fill="none"/>
  <path class="icon" d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"/>
</svg>`,l=t.createElement("template");l.innerHTML=`
  <style>
  :host([media-is-fullscreen]) slot:not([name=exit]) > *, 
  :host([media-is-fullscreen]) ::slotted(:not([slot=exit])) {
    display: none;
  }

  /* Double negative, but safer if display doesn't equal 'block' */
  :host(:not([media-is-fullscreen])) slot:not([name=enter]) > *, 
  :host(:not([media-is-fullscreen])) ::slotted(:not([slot=enter])) {
    display: none;
  }
  </style>

  <slot name="enter">${r}</slot>
  <slot name="exit">${h}</slot>
`;class n extends i{constructor(e={}){e=Object.assign({slotTemplate:l},e),super(e)}handleClick(e){const o=this.mediaIsFullscreen?s.MEDIA_EXIT_FULLSCREEN_REQUEST:s.MEDIA_ENTER_FULLSCREEN_REQUEST;this.dispatchMediaEvent(o)}static get observedAttributes(){return["fullscreen-element"].concat(super.observedAttributes||[])}get fullscreenElement(){return this._fullscreenElement||this.media&&this.media.closest("media-container, media-chrome")||this.media}set fullscreenElement(e){this._fullscreenElement=t.querySelector(e)}}m("media-fullscreen-button",n);export default n;
