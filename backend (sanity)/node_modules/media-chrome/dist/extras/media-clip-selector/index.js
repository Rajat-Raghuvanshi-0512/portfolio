import E from"../../media-chrome-html-element.js";import{defineCustomElement as y}from"../../utils/defineCustomElement.js";import{Window as r,Document as C}from"../../utils/server-safe-globals.js";import"../../media-thumbnail-preview-element.js";import{mediaUIEvents as c}from"../../media-chrome-html-element.js";const g=C.createElement("template"),f=8,m={"100":100,"200":200,"300":300};function o(u){return Math.max(0,Math.min(1,u))}g.innerHTML=`
  <style>
    #selectorContainer {
      background-color: transparent;
      height: 44px;
      width: 100%;
      display: flex;
      position: relative;
    }

    #timeline {
      width: 100%;
      height: 10px;
      background: #ccc;
      position: absolute;
      top: 16px;
      z-index: ${m["100"]};
    }

    #startHandle, #endHandle {
      cursor: pointer;
      height: 80%;
      width: ${f}px;
      border-radius: 4px;
      background-color: royalblue;
    }

    #playhead {
      height: 100%;
      width: 3px;
      background-color: #aaa;
      position: absolute;
      display: none;
      z-index: ${m["300"]};
    }

    #selection {
      display: flex;
      z-index: ${m["200"]};
      width: 25%;
      height: 100%;
      align-items: center;
    }

    #leftTrim {
      width: 25%;
    }

    #spacer {
      flex: 1;
      background-color: cornflowerblue;
      height: 40%;
    }

    #thumbnailContainer {
      display: none;
      position: absolute;
      top: 0;
    }

    media-thumbnail-preview {
      position: absolute;
      bottom: 10px;
      border: 2px solid #fff;
      border-radius: 2px;
      background-color: #000;
      width: 160px;
      height: 90px;

      /* Negative offset of half to center on the handle */
      margin-left: -80px;
    }

    /* Can't get this working. Trying a downward triangle. */
    /* media-thumbnail-preview::after {
      content: "";
      display: block;
      width: 300px;
      height: 300px;
      margin: 100px;
      background-color: #ff0;
    } */

    :host(:hover) #thumbnailContainer.enabled {
      display: block;
      animation: fadeIn ease 0.5s;
    }

    @keyframes fadeIn {
      0% {
        /* transform-origin: bottom center; */
        /* transform: scale(0.7); */
        margin-top: 10px;
        opacity: 0;
      }
      100% {
        /* transform-origin: bottom center; */
        /* transform: scale(1); */
        margin-top: 0;
        opacity: 1;
      }
    }
  </style>
  <div id="thumbnailContainer">
    <media-thumbnail-preview></media-thumbnail-preview>
  </div>
  <div id="selectorContainer">
    <div id="timeline"></div>
    <div id="playhead"></div>
    <div id="leftTrim"></div>
    <div id="selection">
      <div id="startHandle"></div>
      <div id="spacer"></div>
      <div id="endHandle"></div>
    </div>
  </div>
`;class v extends E{static get observedAttributes(){return["thumbnails"].concat(super.observedAttributes||[])}constructor(){super();const e=this.attachShadow({mode:"open"});this.shadowRoot.appendChild(g.content.cloneNode(!0)),this.draggingEl=null,this.wrapper=this.shadowRoot.querySelector("#selectorContainer"),this.selection=this.shadowRoot.querySelector("#selection"),this.playhead=this.shadowRoot.querySelector("#playhead"),this.leftTrim=this.shadowRoot.querySelector("#leftTrim"),this.spacerFirst=this.shadowRoot.querySelector("#spacerFirst"),this.startHandle=this.shadowRoot.querySelector("#startHandle"),this.spacerMiddle=this.shadowRoot.querySelector("#spacerMiddle"),this.endHandle=this.shadowRoot.querySelector("#endHandle"),this.spacerLast=this.shadowRoot.querySelector("#spacerLast"),this._clickHandler=this.handleClick.bind(this),this._dragStart=this.dragStart.bind(this),this._dragEnd=this.dragEnd.bind(this),this._drag=this.drag.bind(this),this.wrapper.addEventListener("click",this._clickHandler,!1),this.wrapper.addEventListener("touchstart",this._dragStart,!1),r.addEventListener("touchend",this._dragEnd,!1),this.wrapper.addEventListener("touchmove",this._drag,!1),this.wrapper.addEventListener("mousedown",this._dragStart,!1),r.addEventListener("mouseup",this._dragEnd,!1),r.addEventListener("mousemove",this._drag,!1),this.enableThumbnails()}getPlayheadBasedOnMouseEvent(e){const t=this.mediaDuration;if(!t)return;const i=o(this.getMousePercent(e));return i*t}getXPositionFromMouse(e){let t;return["touchstart","touchmove"].includes(e.type)&&(t=e.touches[0].clientX),t||e.clientX}getMousePercent(e){const t=this.wrapper.getBoundingClientRect(),i=(this.getXPositionFromMouse(e)-t.left)/t.width;return o(i)}dragStart(e){e.target===this.startHandle&&(this.draggingEl=this.startHandle),e.target===this.endHandle&&(this.draggingEl=this.endHandle),this.initialX=this.getXPositionFromMouse(e)}dragEnd(e){this.initialX=null,this.draggingEl=null}setSelectionWidth(e,t){let i=e;const a=f*3,n=o(a/t);i<n&&(i=n),this.selection.style.width=`${i*100}%`}drag(e){if(!this.draggingEl)return;e.preventDefault();const t=this.wrapper.getBoundingClientRect(),i=t.width,a=this.getXPositionFromMouse(e),n=a-this.initialX,d=this.getMousePercent(e),l=this.selection.getBoundingClientRect().width;if(this.draggingEl===this.startHandle){this.initialX=this.getXPositionFromMouse(e),this.leftTrim.style.width=`${d*100}%`;const s=o((l-n)/i);this.setSelectionWidth(s,i)}if(this.draggingEl===this.endHandle){this.initialX=this.getXPositionFromMouse(e);const s=o((l+n)/i);this.setSelectionWidth(s,i)}this.dispatchUpdate()}dispatchUpdate(){const e=new CustomEvent("update",{detail:this.getCurrentClipBounds()});this.dispatchEvent(e)}getCurrentClipBounds(){const e=this.wrapper.getBoundingClientRect(),t=this.leftTrim.getBoundingClientRect(),i=this.selection.getBoundingClientRect(),a=o(t.width/e.width),n=o((t.width+i.width)/e.width);return{startTime:Math.round(a*this.mediaDuration),endTime:Math.round(n*this.mediaDuration)}}isTimestampInBounds(e){const{startTime:t,endTime:i}=this.getCurrentClipBounds();return t<=e&&i>=e}handleClick(e){const t=this.getMousePercent(e),i=t*this.mediaDuration;this.isTimestampInBounds(i)&&this.dispatchMediaEvent(c.MEDIA_SEEK_REQUEST,{detail:i})}mediaCurrentTimeSet(e){const t=o(this.mediaCurrentTime/this.mediaDuration),i=this.wrapper.getBoundingClientRect().width,a=t*i;if(this.playhead.style.left=`${t*100}%`,this.playhead.style.display="block",!this.mediaPaused){const{startTime:n,endTime:d}=this.getCurrentClipBounds();(this.mediaCurrentTime<n||this.mediaCurrentTime>d)&&this.dispatchMediaEvent(c.MEDIA_SEEK_REQUEST,{detail:n})}}mediaUnsetCallback(e){super.mediaUnsetCallback(e),this.wrapper.removeEventListener("touchstart",this._dragStart),this.wrapper.removeEventListener("touchend",this._dragEnd),this.wrapper.removeEventListener("touchmove",this._drag),this.wrapper.removeEventListener("mousedown",this._dragStart),r.removeEventListener("mouseup",this._dragEnd),r.removeEventListener("mousemove",this._drag)}enableThumbnails(){this.thumbnailPreview=this.shadowRoot.querySelector("media-thumbnail-preview");const e=this.shadowRoot.querySelector("#thumbnailContainer");e.classList.add("enabled");let t;const i=()=>{t=l=>{const s=this.mediaDuration;if(!s)return;const h=this.wrapper.getBoundingClientRect(),p=this.getMousePercent(l),w=h.left-this.getBoundingClientRect().left,b=w+p*h.width;this.thumbnailPreview.style.left=`${b}px`,this.dispatchMediaEvent(c.MEDIA_PREVIEW_REQUEST,{detail:p*s})},r.addEventListener("mousemove",t,!1)},a=()=>{r.removeEventListener("mousemove",t)};let n=!1,d=l=>{if(!n&&this.mediaDuration){n=!0,this.thumbnailPreview.style.display="block",i();let s=h=>{h.target!=this&&!this.contains(h.target)&&(this.thumbnailPreview.style.display="none",r.removeEventListener("mousemove",s),n=!1,a())};r.addEventListener("mousemove",s,!1)}this.mediaDuration||(this.thumbnailPreview.style.display="none")};this.addEventListener("mousemove",d,!1)}disableThumbnails(){thumbnailContainer.classList.remove("enabled")}}y("media-clip-selector",v);export default v;
