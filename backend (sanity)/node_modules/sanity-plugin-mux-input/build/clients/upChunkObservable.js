"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUpChunkObservable = createUpChunkObservable;
var UpChunk = _interopRequireWildcard(require("@mux/upchunk"));
var _rxjs = require("rxjs");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function createUpChunkObservable(uuid, uploadUrl, source) {
  return new _rxjs.Observable(subscriber => {
    var upchunk = UpChunk.createUpload({
      endpoint: uploadUrl,
      file: source,
      chunkSize: 30720 // Uploads the file in 30 MB chunks
    });

    var successHandler = () => {
      subscriber.next({
        type: 'success',
        id: uuid
      });
      subscriber.complete();
    };
    var errorHandler = data => subscriber.error(new Error(data.detail.message));
    var progressHandler = data => {
      return subscriber.next({
        type: 'progress',
        percent: data.detail
      });
    };
    var offlineHandler = () => {
      upchunk.pause();
      subscriber.next({
        type: 'pause',
        id: uuid
      });
    };
    var onlineHandler = () => {
      upchunk.resume();
      subscriber.next({
        type: 'resume',
        id: uuid
      });
    };
    upchunk.on('success', successHandler);
    upchunk.on('error', errorHandler);
    upchunk.on('progress', progressHandler);
    upchunk.on('offline', offlineHandler);
    upchunk.on('online', onlineHandler);
    return () => upchunk.abort();
  });
}
//# sourceMappingURL=upChunkObservable.js.map