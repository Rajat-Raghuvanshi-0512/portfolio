"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extractDroppedFiles = extractDroppedFiles;
/**
 * Utilities for extracting files from dataTransfer in a predictable cross-browser fashion.
 * Also recursively extracts files from a directory
 * Inspired by https://github.com/component/normalized-upload
 */

function extractDroppedFiles(dataTransfer) {
  var files = Array.from(dataTransfer.files || []);
  var items = Array.from(dataTransfer.items || []);
  if (files && files.length > 0) {
    return Promise.resolve(files);
  }
  return normalizeItems(items).then(arr => arr.flat());
}
function normalizeItems(items) {
  return Promise.all(items.map(item => {
    // directory
    if (item.kind === 'file' && item.webkitGetAsEntry) {
      var entry;
      // Edge throws
      try {
        entry = item.webkitGetAsEntry();
      } catch (err) {
        return [item.getAsFile()];
      }
      if (!entry) {
        return [];
      }
      return entry.isDirectory ? walk(entry) : [item.getAsFile()];
    }

    // file
    if (item.kind === 'file') {
      var file = item.getAsFile();
      return Promise.resolve(file ? [file] : []);
    }

    // others
    return new Promise(resolve => item.getAsString(resolve)).then(str => str ? [new File([str], 'unknown.txt', {
      type: item.type
    })] : []);
  }));
}
function isFile(entry) {
  return entry.isFile;
}
function isDirectory(entry) {
  return entry.isDirectory;
}
function walk(entry) {
  if (isFile(entry)) {
    return new Promise(resolve => entry.file(resolve)).then(file => [file]);
  }
  if (isDirectory(entry)) {
    var dir = entry.createReader();
    return new Promise(resolve => dir.readEntries(resolve)).then(entries => entries.filter(entr => !entr.name.startsWith('.'))).then(entries => Promise.all(entries.map(walk)).then(arr => arr.flat()));
  }
  return Promise.resolve([]);
}
//# sourceMappingURL=extractFiles.js.map