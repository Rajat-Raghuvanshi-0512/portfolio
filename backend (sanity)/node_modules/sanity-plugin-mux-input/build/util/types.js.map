{"version":3,"file":"types.js","names":[],"sources":["../../src/util/types.ts"],"sourcesContent":["import {type SanityDocument} from '@sanity/types'\nimport type {PartialDeep} from 'type-fest'\n\nexport interface Secrets {\n  token: string | null\n  secretKey: string | null\n  enableSignedUrls: boolean\n  signingKeyId: string | null\n  signingKeyPrivate: string | null\n}\n// This narrowed type indicates that there may be assets that are signed, and we have the secrets to access them\n// enabledSignedUrls might be false but that's only relevant for future uploads and their playback policy\nexport interface SignableSecrets extends Omit<Secrets, 'signingKeyId' | 'signingKeyPrivate'> {\n  signingKeyId: string\n  signingKeyPrivate: string\n}\n\nexport type MuxImageOrigin = `https://image.mux.com`\nexport type MuxThumbnailUrl = `${MuxImageOrigin}/${string}/thumbnail.png?${string}`\nexport type MuxStoryboardUrl = `${MuxImageOrigin}/${string}/storyboard.vtt?${string}`\nexport type MuxVideoOrigin = `https://stream.mux.com`\nexport type MuxVideoUrl = `${MuxVideoOrigin}/${string}.m3u8?${string}`\nexport type MuxApiUrl = MuxThumbnailUrl | MuxStoryboardUrl | MuxVideoUrl\n\n// 'preserve' by default\n// @url: https://docs.mux.com/guides/video/get-images-from-a-video#thumbnail-query-string-parameters\nexport type FitMode = 'preserve' | 'crop' | 'smartcrop'\n\nexport interface ThumbnailOptions {\n  fit_mode?: FitMode\n  height?: number\n  time?: number\n  width?: number\n}\n\nexport type PlaybackPolicy = 'signed' | 'public'\n\nexport interface MuxErrors {\n  type: string\n  messages: string[]\n}\n\nexport interface MuxPlaybackId {\n  id: string\n  policy: PlaybackPolicy\n}\n\nexport interface MuxVideoTrack {\n  type: 'video'\n  id: string\n  max_width: number\n  max_height: number\n  // if the fps can't be reliably determined, this will be -1\n  max_frame_rate: -1 | number\n  // top-level duration is always set, while track level duration is not\n  duration?: number\n}\nexport interface MuxAudioTrack {\n  type: 'audio'\n  id: string\n  duration?: number\n  max_channels: number\n  max_channel_layout: 'stereo' | string\n}\nexport interface MuxTextTrack {\n  type: 'text'\n  id: string\n  text_type?: 'subtitles'\n  // https://docs.mux.com/api-reference/video#operation/list-assets:~:text=text%20type%20tracks.-,tracks%5B%5D.,text_source,-string\n  text_source?: 'uploaded' | 'embedded' | 'generated_live' | 'generated_live_final'\n  // BCP 47 language code\n  language_code?: 'en' | 'en-US' | string\n  // The name of the track containing a human-readable description. The hls manifest will associate a subtitle text track with this value\n  name?: 'English' | string\n  closed_captions?: boolean\n  //  Max 255 characters\n  passthrough?: string\n  status: 'preparing' | 'ready' | 'errored'\n}\nexport type MuxTrack = MuxVideoTrack | MuxAudioTrack\n// Typings lifted from https://docs.mux.com/api-reference/video#tag/assets\nexport interface MuxAsset {\n  id: string\n  created_at: string\n  status: 'preparing' | 'ready' | 'errored'\n  duration: number\n  max_stored_resolution: 'Audio only' | 'SD' | 'HD' | 'FHD' | 'UHD'\n  // if the fps can't be reliably determined, this will be -1\n  max_stored_frame_rate: -1 | number\n  // The aspect ratio of the asset in the form of width:height, for example 16:9\n  aspect_ratio: `${number}:${number}`\n  playback_ids: MuxPlaybackId[]\n  tracks: MuxTrack[]\n  errors?: MuxErrors\n  upload_id: string\n  is_live?: boolean\n  // We use passthrough to set the mux.videoAsset._id of the asset that originally uploaded the video\n  passthrough: string\n  live_stream_id?: string\n  master?: {\n    status: 'ready' | 'preparing' | 'errored'\n    // Temporary URL to master MP4, expires after 24 hours\n    url: string\n  }\n  master_access: 'temporary' | 'none'\n  mp4_support: 'standard' | 'none'\n  // Asset Identifier of the video used as the source for creating the clip.\n  source_asset_id?: string\n  // Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets., default false\n  normalize_audio?: boolean\n  // The object does not exist if no static renditions have been requested\n  static_renditions?: {\n    status: 'ready' | 'preparing' | 'disabled' | 'errored'\n    files: {\n      name: 'low.mp4' | 'medium.mp4' | 'high.mp4' | 'audio.m4a'\n      ext: 'mp4' | 'm4a'\n      height: number\n      width: number\n      bitrate: number\n      filesize: number\n    }[]\n  }\n  recording_times?: {\n    started_at: string\n    duration: number\n    type: 'content' | 'slate'\n  }[]\n  // https://docs.mux.com/guides/video/minimize-processing-time\n  non_standard_input_reasons?: {\n    video_codec?: string\n    audio_codec?: string\n    video_gop_size?: 'high'\n    video_frame_rate?: string\n    video_resolution?: string\n    video_bitrate?: 'high'\n    pixel_aspect_ratio?: string\n    video_edit_list?: 'non-standard'\n    audio_edit_list?: 'non-standard'\n    unexpected_media_file_parameters?: 'non-standard'\n    test?: boolean\n  }\n}\n\nexport interface VideoAssetDocument extends Partial<SanityDocument> {\n  type?: 'mux.videoAsset'\n  status?: string\n  assetId?: string\n  playbackId?: string\n  filename?: string\n  thumbTime?: number\n  // Docs for what goes in `data` https://docs.mux.com/api-reference/video#tag/assets\n  data?: PartialDeep<MuxAsset>\n}\n"],"mappings":""}