"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("media-chrome");
var _ui = require("@sanity/ui");
var _hls = _interopRequireDefault(require("hls.js"));
var _bar = _interopRequireDefault(require("part:@sanity/components/progress/bar"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _usePrevious = _interopRequireDefault(require("use-previous"));
var _assets = require("../actions/assets");
var _getPosterSrc = require("../util/getPosterSrc");
var _getStoryboardSrc = require("../util/getStoryboardSrc");
var _getVideoSrc = require("../util/getVideoSrc");
var _Uploader = require("./Uploader.styles");
var _templateObject;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var VideoContainer = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  min-height: 150px;\n"])));
var MuxVideo = _ref => {
  var _asset$data3, _asset$data3$static_r;
  var asset = _ref.asset,
    secrets = _ref.secrets,
    handleVideoReadyToPlay = _ref.handleVideoReadyToPlay,
    handleRemoveVideo = _ref.handleRemoveVideo,
    onBrowse = _ref.onBrowse,
    onRemove = _ref.onRemove,
    onUpload = _ref.onUpload,
    readOnly = _ref.readOnly,
    videoReadyToPlay = _ref.videoReadyToPlay;
  var options = (0, _react.useMemo)(() => ({
    asset,
    secrets
  }), [asset, secrets]);
  var source = (0, _react.useMemo)(() => (0, _getVideoSrc.getVideoSrc)(options), [options]);
  var posterUrl = (0, _react.useMemo)(() => (0, _getPosterSrc.getPosterSrc)(options), [options]);
  var storyboardUrl = (0, _react.useMemo)(() => (0, _getStoryboardSrc.getStoryboardSrc)(options), [options]);
  var isLoading = (0, _react.useMemo)(() => {
    if (asset && asset.status === 'preparing') {
      return 'Preparing the video';
    }
    if (asset && asset.status === 'waiting_for_upload') {
      return 'Waiting for upload to start';
    }
    if (asset && asset.status === 'waiting') {
      return 'Processing upload';
    }
    if (asset && asset.status === 'ready') {
      return false;
    }
    if (asset && typeof asset.status === 'undefined') {
      return false;
    }
    return true;
  }, [asset]);
  var isPreparingStaticRenditions = (0, _react.useMemo)(() => {
    var _asset$data, _asset$data$static_re, _asset$data2, _asset$data2$static_r;
    if ((asset === null || asset === void 0 ? void 0 : (_asset$data = asset.data) === null || _asset$data === void 0 ? void 0 : (_asset$data$static_re = _asset$data.static_renditions) === null || _asset$data$static_re === void 0 ? void 0 : _asset$data$static_re.status) === 'preparing') {
      return true;
    }
    if ((asset === null || asset === void 0 ? void 0 : (_asset$data2 = asset.data) === null || _asset$data2 === void 0 ? void 0 : (_asset$data2$static_r = _asset$data2.static_renditions) === null || _asset$data2$static_r === void 0 ? void 0 : _asset$data2$static_r.status) === 'ready') {
      return false;
    }
    return false;
  }, [asset === null || asset === void 0 ? void 0 : (_asset$data3 = asset.data) === null || _asset$data3 === void 0 ? void 0 : (_asset$data3$static_r = _asset$data3.static_renditions) === null || _asset$data3$static_r === void 0 ? void 0 : _asset$data3$static_r.status]);
  var _useState = (0, _react.useState)(null),
    _useState2 = _slicedToArray(_useState, 2),
    error = _useState2[0],
    setError = _useState2[1];
  var _useState3 = (0, _react.useState)(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isDeletedOnMux = _useState4[0],
    setDeletedOnMux = _useState4[1];
  var videoContainer = (0, _react.useRef)(null);
  var playRef = (0, _react.useRef)(null);
  var muteRef = (0, _react.useRef)(null);
  var video = (0, _react.useRef)(null);
  var hls = (0, _react.useRef)(null);
  var getCurrentTime = (0, _react.useCallback)(() => {
    var _video$current$curren, _video$current;
    return (_video$current$curren = (_video$current = video.current) === null || _video$current === void 0 ? void 0 : _video$current.currentTime) !== null && _video$current$curren !== void 0 ? _video$current$curren : 0;
  }, [video]);
  (0, _react.useEffect)(() => {
    var _playRef$current, _muteRef$current;
    var style = document.createElement('style');
    style.innerHTML = 'button svg { vertical-align: middle; }';
    if ((_playRef$current = playRef.current) !== null && _playRef$current !== void 0 && _playRef$current.shadowRoot) {
      playRef.current.shadowRoot.appendChild(style);
    }
    if (muteRef !== null && muteRef !== void 0 && (_muteRef$current = muteRef.current) !== null && _muteRef$current !== void 0 && _muteRef$current.shadowRoot) {
      muteRef.current.shadowRoot.appendChild(style.cloneNode(true));
    }
  }, []);
  var attachVideo = (0, _react.useCallback)(() => {
    if (_hls.default.isSupported()) {
      hls.current = new _hls.default({
        autoStartLoad: true
      });
      hls.current.loadSource(source);
      hls.current.attachMedia(video.current);
      hls.current.on(_hls.default.Events.MANIFEST_PARSED, () => {
        if (videoContainer.current) {
          videoContainer.current.style.display = 'block';
        }
        handleVideoReadyToPlay();
      });
      hls.current.on(_hls.default.Events.ERROR, (event, data) => {
        switch (data.type) {
          case _hls.default.ErrorTypes.NETWORK_ERROR:
            if (videoContainer.current) {
              videoContainer.current.style.display = 'none';
            }
            setError(data);
            (0, _assets.getAsset)(asset.assetId).then(() => {
              setDeletedOnMux(false);
            }).catch(err => {
              if (err.message.match(/404/)) {
                setDeletedOnMux(true);
                return;
              }
              console.error(data, err); // eslint-disable-line no-console
            });

            break;
          default:
            console.error(data);
          // eslint-disable-line no-console
        }
      });
    } else if (video.current.canPlayType('application/vnd.apple.mpegurl')) {
      video.current.src = source;
      video.current.addEventListener('loadedmetadata', () => {
        hls.current.loadSource(source);
        hls.current.attachMedia(video.current);
      });
    }
  }, [asset.assetId, handleVideoReadyToPlay, source]);
  var prevSource = (0, _usePrevious.default)(source);
  // eslint-disable-next-line consistent-return
  (0, _react.useEffect)(() => {
    if (source !== null && video.current && !video.current.src) {
      setError(null);
      attachVideo();
      return () => {
        if (hls.current) {
          hls.current.destroy();
          hls.current = null;
        }
      };
    }
    if (source !== null && source !== prevSource) {
      setError(null);
      attachVideo();
      return () => {
        if (hls.current) {
          hls.current.destroy();
          hls.current = null;
        }
      };
    }
  }, [attachVideo, prevSource, source]);
  if (!asset || !asset.status) {
    return null;
  }
  if (isLoading) {
    return /*#__PURE__*/_react.default.createElement(_Uploader.UploadProgressCard, null, /*#__PURE__*/_react.default.createElement(_Uploader.UploadProgressStack, null, /*#__PURE__*/_react.default.createElement(_bar.default, {
      percent: 100,
      text: isLoading !== true && isLoading || 'Waiting for Mux to complete the file',
      isInProgress: true,
      showPercent: true,
      animation: true,
      color: "primary"
    }), /*#__PURE__*/_react.default.createElement(_Uploader.UploadCancelButton, {
      onClick: handleRemoveVideo
    }, "Cancel")));
  }
  var shouldRenderButtons = asset && asset.status === 'ready' && !readOnly;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(VideoContainer, {
    ref: videoContainer
  }, /*#__PURE__*/_react.default.createElement("media-controller", null, /*#__PURE__*/_react.default.createElement("video", {
    ref: video,
    poster: posterUrl !== null && posterUrl !== void 0 ? posterUrl : undefined,
    slot: "media",
    crossOrigin: "anonomous"
  }, storyboardUrl && /*#__PURE__*/_react.default.createElement("track", {
    label: "thumbnails",
    default: true,
    kind: "metadata",
    src: storyboardUrl
  })), /*#__PURE__*/_react.default.createElement("media-control-bar", null, /*#__PURE__*/_react.default.createElement("media-play-button", {
    ref: playRef
  }), /*#__PURE__*/_react.default.createElement("media-mute-button", {
    ref: muteRef
  }), /*#__PURE__*/_react.default.createElement("media-time-range", null))), error && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 3,
    radius: 2,
    shadow: 1,
    tone: "critical",
    marginTop: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
    space: 2
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1
  }, "There was an error loading this video (", error.type, ")."), isDeletedOnMux && /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1
  }, "The video is deleted on Mux"))), isPreparingStaticRenditions && /*#__PURE__*/_react.default.createElement(_ui.Card, {
    padding: 2,
    radius: 1,
    style: {
      background: 'var(--card-fg-color)',
      position: 'absolute',
      top: '0.5em',
      left: '0.5em'
    }
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
    size: 1,
    style: {
      color: 'var(--card-bg-color)'
    }
  }, "MUX is preparing static renditions, please stand by"))), shouldRenderButtons && /*#__PURE__*/_react.default.createElement(_Uploader.UploadButtonGrid, {
    asset: asset,
    getCurrentTime: getCurrentTime,
    onUpload: onUpload,
    onBrowse: onBrowse,
    onRemove: onRemove,
    videoReadyToPlay: videoReadyToPlay,
    secrets: secrets
  }));
};
var _default = MuxVideo;
exports.default = _default;
//# sourceMappingURL=Player.js.map