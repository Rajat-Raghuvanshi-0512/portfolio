"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadProgressStack = exports.UploadProgressCard = exports.UploadProgress = exports.UploadPlaceholder = exports.UploadCard = exports.UploadCancelButton = exports.UploadButtonGrid = exports.UploadButton = exports.ErrorDialog = void 0;
var _autoId = require("@reach/auto-id");
var _ui = require("@sanity/ui");
var _classnames = _interopRequireDefault(require("classnames"));
var _bar = _interopRequireDefault(require("part:@sanity/components/progress/bar"));
var _react = _interopRequireWildcard(require("react"));
var _fi = require("react-icons/fi");
var _styledComponents = _interopRequireWildcard(require("styled-components"));
var _EditThumbnailDialog = _interopRequireDefault(require("./EditThumbnailDialog"));
var _FileInputButton = require("./FileInputButton");
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var ErrorDialog = _ref => {
  var message = _ref.message,
    onClose = _ref.onClose,
    onSetup = _ref.onSetup;
  var id = "ErrorDialog".concat((0, _autoId.useId)());
  if (message === 'Invalid credentials') {
    return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      id: id,
      header: "Invalid credentials",
      onClose: onClose
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, "You need to check your Mux access token and secret key."), /*#__PURE__*/_react.default.createElement(_ui.Button, {
      text: "Run setup",
      tone: "primary",
      padding: 3,
      onClick: onSetup
    }))));
  }
  return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
    id: id,
    header: "Upload failed",
    onClose: onClose
  }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, message)));
};
exports.ErrorDialog = ErrorDialog;
var UploadProgress = _ref2 => {
  var uploadProgress = _ref2.progress,
    fileInfo = _ref2.fileInfo,
    url = _ref2.url,
    error = _ref2.error,
    onCancel = _ref2.onCancel;
  var text = uploadProgress < 100 ? "Uploading ".concat(fileInfo ? "'".concat(fileInfo.name, "'") : 'file') : 'Waiting for Mux to complete the file';
  if (error) {
    text = error.message;
  }
  if (url) {
    text = "Uploading ".concat(url);
  }
  return /*#__PURE__*/_react.default.createElement(UploadProgressCard, null, /*#__PURE__*/_react.default.createElement(UploadProgressStack, {
    space: 5
  }, /*#__PURE__*/_react.default.createElement(_bar.default, {
    percent: uploadProgress,
    text: text,
    isInProgress: uploadProgress === 100 && !error,
    showPercent: true,
    animation: true,
    color: "primary"
  }), (uploadProgress < 100 || error) && /*#__PURE__*/_react.default.createElement(UploadCancelButton, {
    text: "Cancel upload",
    onClick: onCancel
  })));
};
exports.UploadProgress = UploadProgress;
var UploadProgressCard = (0, _styledComponents.default)(_ui.Card).attrs({
  padding: 4
})(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n"])));
exports.UploadProgressCard = UploadProgressCard;
var UploadCancelButton = (0, _styledComponents.default)(_ui.Button).attrs({
  padding: 3,
  tone: 'critical'
})(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  justify-self: center;\n"])));
exports.UploadCancelButton = UploadCancelButton;
var UploadProgressStack = (0, _styledComponents.default)(_ui.Stack).attrs({
  space: 5
})(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  text-align: left;\n"])));
exports.UploadProgressStack = UploadProgressStack;
var ctrlKey = 17;
var cmdKey = 91;
var UploadCard = /*#__PURE__*/(0, _react.forwardRef)((_ref3, forwardedRef) => {
  var children = _ref3.children,
    onPaste = _ref3.onPaste,
    onFocus = _ref3.onFocus,
    onBlur = _ref3.onBlur,
    onDrop = _ref3.onDrop,
    onDragEnter = _ref3.onDragEnter,
    onDragLeave = _ref3.onDragLeave,
    onDragOver = _ref3.onDragOver;
  var ctrlDown = (0, _react.useRef)(false);
  var inputRef = (0, _react.useRef)(null);
  var handleKeyDown = (0, _react.useCallback)(event => {
    if (event.keyCode == ctrlKey || event.keyCode == cmdKey) {
      ctrlDown.current = true;
    }
    var vKey = 86;
    if (ctrlDown.current && event.keyCode == vKey) {
      inputRef.current.focus();
    }
  }, []);
  var handleKeyUp = (0, _react.useCallback)(event => {
    if (event.keyCode == ctrlKey || event.keyCode == cmdKey) {
      ctrlDown.current = false;
    }
  }, []);
  return /*#__PURE__*/_react.default.createElement(_ui.Card, {
    ref: forwardedRef,
    padding: 0,
    radius: 0,
    shadow: 0,
    tabIndex: 0,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    onPaste: onPaste,
    onFocus: onFocus,
    onBlur: onBlur,
    onDrop: onDrop,
    onDragEnter: onDragEnter,
    onDragLeave: onDragLeave,
    onDragOver: onDragOver
  }, /*#__PURE__*/_react.default.createElement(HiddenInput, {
    ref: inputRef,
    onPaste: onPaste
  }), children);
});
exports.UploadCard = UploadCard;
var HiddenInput = _styledComponents.default.input.attrs({
  type: 'text'
})(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral(["\n  position: absolute;\n  border: 0;\n  color: white;\n  opacity: 0;\n\n  &:focus {\n    outline: none;\n  }\n"])));
var UploadPlaceholder = _ref4 => {
  var onUpload = _ref4.onUpload,
    onBrowse = _ref4.onBrowse,
    invalidPaste = _ref4.invalidPaste,
    invalidFile = _ref4.invalidFile,
    hasFocus = _ref4.hasFocus,
    isDraggingOver = _ref4.isDraggingOver;
  return /*#__PURE__*/_react.default.createElement(UploaderCard, {
    className: (0, _classnames.default)({
      'is-invalid-file': invalidFile,
      'is-invalid-paste': invalidPaste,
      'has-focus': hasFocus
    })
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    justify: "center",
    align: "center",
    padding: 3
  }, /*#__PURE__*/_react.default.createElement(UploaderCardDrop, {
    display: ['none', 'block'],
    radius: 2,
    padding: 4,
    tone: invalidFile ? 'critical' : isDraggingOver ? 'positive' : undefined
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, /*#__PURE__*/_react.default.createElement(_fi.FiUpload, {
    size: "1.25em"
  }))), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    weight: "medium"
  }, "Drop file")), /*#__PURE__*/_react.default.createElement(UploaderCardPaste, {
    display: ['none', 'block'],
    radius: 2,
    padding: 4,
    tone: invalidPaste ? 'critical' : undefined
  }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
    align: "center",
    justify: "center",
    padding: 4
  }, /*#__PURE__*/_react.default.createElement(_ui.Text, null, /*#__PURE__*/_react.default.createElement(_fi.FiCopy, {
    size: "1.25em"
  }))), /*#__PURE__*/_react.default.createElement(_ui.Text, {
    weight: "medium"
  }, "Paste URL"))), /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: 2,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(UploadButton, {
    onSelect: onUpload
  }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    mode: "ghost",
    tone: "default",
    text: "Browse",
    onClick: onBrowse
  })));
};
exports.UploadPlaceholder = UploadPlaceholder;
var shake = (0, _styledComponents.keyframes)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral(["\n10%,\n  90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n\n  20%,\n  80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%,\n  50%,\n  70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%,\n  60% {\n    transform: translate3d(4px, 0, 0);\n  }\n"])));
var UploaderCardDrop = (0, _styledComponents.default)(_ui.Card)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([""])));
var UploaderCardPaste = (0, _styledComponents.default)(_ui.Card)(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral(["\n  opacity: 0.2;\n  transition: opacity linear 0.2s;\n"])));
var UploaderCard = (0, _styledComponents.default)(_ui.Card)(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral(["\n  &.is-invalid-file ", ", &.is-invalid-paste ", " {\n    animation: ", " 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;\n    transform: translate3d(0, 0, 0);\n    backface-visibility: hidden;\n    perspective: 1000px;\n  }\n  &.has-focus ", " {\n    opacity: 1;\n  }\n"])), UploaderCardDrop, UploaderCardPaste, shake, UploaderCardPaste);
var UploadButton = _ref5 => {
  var onSelect = _ref5.onSelect;
  return /*#__PURE__*/_react.default.createElement(_FileInputButton.FileInputButton, {
    icon: /*#__PURE__*/_react.default.createElement(_fi.FiUpload, {
      "data-sanity-icon": "upload"
    }),
    onSelect: onSelect,
    text: "Upload"
  });
};
exports.UploadButton = UploadButton;
var UploadButtonGrid = _ref6 => {
  var asset = _ref6.asset,
    getCurrentTime = _ref6.getCurrentTime,
    onBrowse = _ref6.onBrowse,
    onRemove = _ref6.onRemove,
    onUpload = _ref6.onUpload,
    secrets = _ref6.secrets,
    videoReadyToPlay = _ref6.videoReadyToPlay;
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var handleClose = (0, _react.useCallback)(() => setOpen(false), []);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Grid, {
    columns: 4,
    gap: 2
  }, /*#__PURE__*/_react.default.createElement(UploadButton, {
    onSelect: onUpload
  }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    key: "browse",
    mode: "ghost",
    tone: "primary",
    onClick: onBrowse,
    text: "Browse"
  }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    key: "thumbnail",
    mode: "ghost",
    tone: "primary",
    disabled: videoReadyToPlay === false,
    onClick: () => setOpen('thumbnail'),
    text: "Thumbnail"
  }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
    key: "remove",
    onClick: onRemove,
    mode: "ghost",
    tone: "critical",
    text: "Remove"
  })), open === 'thumbnail' && /*#__PURE__*/_react.default.createElement(_EditThumbnailDialog.default, {
    asset: asset,
    getCurrentTime: getCurrentTime,
    onClose: handleClose,
    secrets: secrets,
    videoReadyToPlay: videoReadyToPlay
  }));
};
exports.UploadButtonGrid = UploadButtonGrid;
//# sourceMappingURL=Uploader.styles.js.map