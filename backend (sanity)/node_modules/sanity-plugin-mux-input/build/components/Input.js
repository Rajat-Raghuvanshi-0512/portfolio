"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ui = require("@sanity/ui");
var _preview = require("part:@sanity/base/preview");
var _default2 = _interopRequireDefault(require("part:@sanity/components/formfields/default"));
var _spinner = _interopRequireDefault(require("part:@sanity/components/loading/spinner"));
var _formBuilder = require("part:@sanity/form-builder");
var _patchEvent = _interopRequireWildcard(require("part:@sanity/form-builder/patch-event"));
var _react = _interopRequireWildcard(require("react"));
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
var _assets = require("../actions/assets");
var _secrets = require("../actions/secrets");
var _SanityClient = _interopRequireDefault(require("../clients/SanityClient"));
var _config = _interopRequireDefault(require("../config"));
var _Input = _interopRequireDefault(require("./Input.css"));
var _InputBrowser = _interopRequireDefault(require("./InputBrowser"));
var _InputError = _interopRequireDefault(require("./InputError"));
var _SetupButton = _interopRequireDefault(require("./SetupButton"));
var _SetupNotice = _interopRequireDefault(require("./SetupNotice"));
var _Uploader = _interopRequireDefault(require("./Uploader"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
var cachedSecrets = {
  token: null,
  secretKey: null,
  enableSignedUrls: false,
  signingKeyId: null,
  signingKeyPrivate: null
};
function validateSecrets(secrets) {
  if (!secrets.token || !secrets.secretKey) return false;
  return true;
}
function getSecrets() {
  if (cachedSecrets.token) {
    return Promise.resolve({
      isInitialSetup: true,
      needsSetup: false,
      secrets: cachedSecrets
    });
  }
  return (0, _secrets.fetchSecrets)().then(_ref => {
    var _secrets$token, _secrets$secretKey, _secrets$enableSigned, _secrets$signingKeyId, _secrets$signingKeyPr;
    var secrets = _ref.secrets,
      exists = _ref.exists;
    cachedSecrets.token = (_secrets$token = secrets === null || secrets === void 0 ? void 0 : secrets.token) !== null && _secrets$token !== void 0 ? _secrets$token : null;
    cachedSecrets.secretKey = (_secrets$secretKey = secrets === null || secrets === void 0 ? void 0 : secrets.secretKey) !== null && _secrets$secretKey !== void 0 ? _secrets$secretKey : null;
    cachedSecrets.enableSignedUrls = (_secrets$enableSigned = secrets === null || secrets === void 0 ? void 0 : secrets.enableSignedUrls) !== null && _secrets$enableSigned !== void 0 ? _secrets$enableSigned : false;
    cachedSecrets.signingKeyId = (_secrets$signingKeyId = secrets === null || secrets === void 0 ? void 0 : secrets.signingKeyId) !== null && _secrets$signingKeyId !== void 0 ? _secrets$signingKeyId : null;
    cachedSecrets.signingKeyPrivate = (_secrets$signingKeyPr = secrets === null || secrets === void 0 ? void 0 : secrets.signingKeyPrivate) !== null && _secrets$signingKeyPr !== void 0 ? _secrets$signingKeyPr : null;
    return {
      isInitialSetup: !exists,
      needsSetup: !validateSecrets(cachedSecrets),
      secrets: cachedSecrets
    };
  });
}
var _default = (0, _formBuilder.withDocument)(class MuxVideoInput extends _react.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      assetDocument: null,
      confirmRemove: false,
      deleteOnMuxChecked: false,
      deleteAssetDocumentChecked: true,
      error: null,
      hasFocus: false,
      isInitialSetup: true,
      isLoading: 'secrets',
      needsSetup: true,
      secrets: null,
      showSetup: false,
      showBrowser: false,
      videoReadyToPlay: false
    });
    _defineProperty(this, "pollInterval", void 0);
    _defineProperty(this, "subscription", void 0);
    _defineProperty(this, "handleFocus", () => {
      this.setState({
        hasFocus: true
      });
    });
    _defineProperty(this, "handleBlur", () => {
      this.setState({
        hasFocus: false
      });
    });
    _defineProperty(this, "pollMux", () => {
      var assetDocument = this.state.assetDocument;
      if (!assetDocument) {
        return;
      }
      if (this.pollInterval) {
        return;
      }
      this.pollInterval = setInterval(() => {
        (0, _assets.getAsset)(assetDocument.assetId).then(response => {
          var props = response.data;
          _SanityClient.default.patch(assetDocument._id).set({
            status: props.status,
            data: props
          }).commit({
            returnDocuments: false
          });
        }).catch(error => {
          this.setState({
            error
          });
        });
      }, 2000);
    });
    _defineProperty(this, "handleSetupButtonClicked", () => {
      this.setState(prevState => ({
        showSetup: !prevState.showSetup
      }));
    });
    _defineProperty(this, "handleSaveSetup", _ref2 => {
      var token = _ref2.token,
        secretKey = _ref2.secretKey,
        enableSignedUrls = _ref2.enableSignedUrls,
        signingKeyId = _ref2.signingKeyId,
        signingKeyPrivate = _ref2.signingKeyPrivate;
      cachedSecrets.token = token;
      cachedSecrets.secretKey = secretKey;
      cachedSecrets.enableSignedUrls = enableSignedUrls;
      cachedSecrets.signingKeyId = signingKeyId;
      cachedSecrets.signingKeyPrivate = signingKeyPrivate;
      this.setState({
        showSetup: false,
        secrets: cachedSecrets,
        needsSetup: !validateSecrets(cachedSecrets)
      });
    });
    _defineProperty(this, "handleCancelSaveSetup", () => {
      this.setState({
        showSetup: false
      });
    });
    _defineProperty(this, "handleOnUploadComplete", result => {
      var onChange = this.props.onChange;
      var _id = result._id;
      onChange(_patchEvent.default.from([(0, _patchEvent.setIfMissing)({
        asset: {}
      }), (0, _patchEvent.set)({
        _type: 'reference',
        _ref: _id
      }, ['asset'])]));
      this.setState({
        assetDocument: result.document
      }, () => {
        this.setupAssetListener();
      });
    });
    _defineProperty(this, "handleRemoveVideoButtonClicked", () => {
      this.setState({
        confirmRemove: true
      });
    });
    _defineProperty(this, "handleRemoveVideo", () => {
      var assetDocument = this.state.assetDocument;
      this.setState({
        isLoading: true
      });
      var unsetAsset = () => {
        return new Promise((resolve, reject) => {
          this.setState({
            assetDocument: null,
            confirmRemove: false,
            isLoading: false
          }, () => {
            if (this.state.deleteOnMuxChecked || this.state.deleteAssetDocumentChecked) {
              return _SanityClient.default.patch(this.props.document._id).unset(['video']).commit({
                returnDocuments: false
              }).then(() => {
                if (!assetDocument) {
                  return resolve(undefined);
                }
                return _SanityClient.default.delete(assetDocument._id).then(() => {
                  resolve(undefined);
                }).catch(error => {
                  reject(error);
                });
              });
            }
            return this.props.onChange(_patchEvent.default.from((0, _patchEvent.unset)()));
          });
        });
      };
      return unsetAsset().then(() => {
        if (this.state.deleteOnMuxChecked) {
          return (0, _assets.deleteAsset)(assetDocument.assetId).catch(error => {
            this.setState({
              error
            });
          });
        }
        return true;
      }).catch(error => {
        this.setState({
          error
        });
      });
    });
    _defineProperty(this, "handleCancelRemove", () => {
      this.setState({
        confirmRemove: false,
        deleteOnMuxChecked: true,
        deleteAssetDocumentChecked: true
      });
    });
    _defineProperty(this, "handleDeleteOnMuxCheckBoxClicked", () => {
      this.setState(prevState => ({
        deleteOnMuxChecked: !prevState.deleteOnMuxChecked
      }));
    });
    _defineProperty(this, "handleDeleteAssetDocumentCheckBoxClicked", () => {
      this.setState(prevState => ({
        deleteAssetDocumentChecked: !prevState.deleteAssetDocumentChecked
      }));
    });
    _defineProperty(this, "handleErrorClose", () => {
      this.setState({
        error: null
      });
    });
    _defineProperty(this, "handleBrowseButton", () => {
      this.setState({
        showBrowser: true
      });
    });
    _defineProperty(this, "handleCloseBrowser", () => {
      this.setState({
        showBrowser: false
      });
    });
    _defineProperty(this, "handleSelectAsset", asset => {
      var onChange = this.props.onChange;
      onChange(_patchEvent.default.from([(0, _patchEvent.setIfMissing)({
        asset: {}
      }), (0, _patchEvent.set)({
        _type: 'reference',
        _ref: asset._id
      }, ['asset'])]));
      this.setState({
        showBrowser: false,
        assetDocument: asset
      }, () => {
        this.setupAssetListener();
      });
    });
    _defineProperty(this, "handleVideoReadyToPlay", () => {
      this.setState({
        videoReadyToPlay: true
      });
    });
  }
  componentDidMount() {
    getSecrets().then(_ref3 => {
      var _this$props$value;
      var secrets = _ref3.secrets,
        isInitialSetup = _ref3.isInitialSetup,
        needsSetup = _ref3.needsSetup;
      this.setState({
        secrets,
        isInitialSetup,
        needsSetup,
        // If there is an asset continue loading
        isLoading: !!((_this$props$value = this.props.value) !== null && _this$props$value !== void 0 && _this$props$value.asset)
      });
    }).catch(error => this.setState({
      error
    }));
    this.setupAssetListener();
  }
  componentWillUnmount() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
    if (this.pollInterval) {
      clearInterval(this.pollInterval);
      this.pollInterval = undefined;
    }
  }
  getAsset() {
    var value = this.props.value;
    return value ? value.asset : null;
  }
  setupAssetListener() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
    this.setState({
      videoReadyToPlay: false
    });
    var asset = this.getAsset();
    if (!asset) {
      return;
    }
    this.subscription = (0, _preview.observePaths)(asset, ['thumbTime', 'data', 'assetId', 'playbackId', 'status']).pipe((0, _operators.tap)(assetDocument => {
      var _assetDocument$data2, _assetDocument$data2$, _assetDocument$data3, _assetDocument$data3$;
      this.setState({
        assetDocument
      });
      if (assetDocument && assetDocument.status === 'errored') {
        clearInterval(this.pollInterval);
        this.pollInterval = undefined;
        // eslint-disable-next-line no-warning-comments
        // todo: use client.observable
        return this.handleRemoveVideo().then(() => {
          var _assetDocument$data, _assetDocument$data$e, _assetDocument$data$e2;
          this.setState({
            isLoading: false,
            error: new Error((_assetDocument$data = assetDocument.data) === null || _assetDocument$data === void 0 ? void 0 : (_assetDocument$data$e = _assetDocument$data.errors) === null || _assetDocument$data$e === void 0 ? void 0 : (_assetDocument$data$e2 = _assetDocument$data$e.messages) === null || _assetDocument$data$e2 === void 0 ? void 0 : _assetDocument$data$e2.join(' '))
          });
        });
      }
      // Poll MUX if it's preparing the main document or its own static renditions
      if ((assetDocument === null || assetDocument === void 0 ? void 0 : assetDocument.status) === 'preparing' || (assetDocument === null || assetDocument === void 0 ? void 0 : (_assetDocument$data2 = assetDocument.data) === null || _assetDocument$data2 === void 0 ? void 0 : (_assetDocument$data2$ = _assetDocument$data2.static_renditions) === null || _assetDocument$data2$ === void 0 ? void 0 : _assetDocument$data2$.status) === 'preparing') {
        this.pollMux();
      }
      // If MP4 support is enabled: MUX will prepare static_renditions only _after_ an asset
      // has been successfully uploaded.
      // A _ready_ asset doesn't mean static mp4s are generated and ready for use!
      // In these cases, wait for `static_renditions.status === 'ready'` before clearing the poll interval.
      if (assetDocument && assetDocument.status === 'ready') {
        switch (_config.default.mp4_support) {
          case 'standard':
            if ((assetDocument === null || assetDocument === void 0 ? void 0 : (_assetDocument$data3 = assetDocument.data) === null || _assetDocument$data3 === void 0 ? void 0 : (_assetDocument$data3$ = _assetDocument$data3.static_renditions) === null || _assetDocument$data3$ === void 0 ? void 0 : _assetDocument$data3$.status) === 'ready') {
              clearInterval(this.pollInterval);
              this.pollInterval = undefined;
            }
            break;
          case 'none':
          default:
            clearInterval(this.pollInterval);
            this.pollInterval = undefined;
            break;
        }
      }
      this.setState({
        assetDocument,
        isLoading: false
      });
      return (0, _rxjs.of)(assetDocument);
    })).subscribe();
  }
  render() {
    var _this$props = this.props,
      type = _this$props.type,
      level = _this$props.level,
      markers = _this$props.markers;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      style: {
        position: 'relative'
      }
    }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center",
      justify: "space-between"
    }, /*#__PURE__*/_react.default.createElement(_default2.default, {
      label: type.title,
      markers: markers,
      description: type.description,
      level: level,
      className: _Input.default.formField
    }), /*#__PURE__*/_react.default.createElement(_SetupButton.default, {
      isLoading: this.state.isLoading,
      needsSetup: this.state.needsSetup,
      onCancel: this.handleCancelSaveSetup,
      onSave: this.handleSaveSetup,
      onSetup: this.handleSetupButtonClicked,
      secrets: this.state.secrets,
      showSetup: this.state.showSetup
    })), this.state.isLoading === 'secrets' && /*#__PURE__*/_react.default.createElement(_ui.Box, {
      marginBottom: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Inline, {
      space: 2
    }, /*#__PURE__*/_react.default.createElement(_spinner.default, {
      inline: true
    }), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "Fetching credentials"))), this.state.needsSetup && /*#__PURE__*/_react.default.createElement(_SetupNotice.default, {
      isLoading: this.state.isLoading,
      isInitialSetup: this.state.isInitialSetup
    }), !this.state.needsSetup && this.state.secrets && /*#__PURE__*/_react.default.createElement(_Uploader.default, {
      hasFocus: this.state.hasFocus,
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      onSetupButtonClicked: this.handleSetupButtonClicked,
      onUploadComplete: this.handleOnUploadComplete,
      secrets: this.state.secrets,
      onBrowse: this.handleBrowseButton,
      asset: this.state.assetDocument,
      onRemove: this.handleRemoveVideoButtonClicked,
      readOnly: this.props.readOnly,
      handleVideoReadyToPlay: this.handleVideoReadyToPlay,
      videoReadyToPlay: this.state.videoReadyToPlay,
      handleRemoveVideo: this.handleRemoveVideo
    }), this.state.showBrowser && /*#__PURE__*/_react.default.createElement(_InputBrowser.default, {
      onClose: this.handleCloseBrowser,
      onSelect: this.handleSelectAsset,
      secrets: this.state.secrets
    }), this.state.confirmRemove && /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      id: "remove-video",
      header: "Remove video",
      zOffset: 1000,
      onClose: this.handleCancelRemove
    }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 3
    }, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Checkbox, {
      checked: this.state.deleteOnMuxChecked,
      onChange: this.handleDeleteOnMuxCheckBoxClicked
    }), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      style: {
        margin: '0 10px'
      }
    }, "Delete asset on Mux")), /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center"
    }, /*#__PURE__*/_react.default.createElement(_ui.Checkbox, {
      disabled: this.state.deleteOnMuxChecked,
      checked: this.state.deleteOnMuxChecked || this.state.deleteAssetDocumentChecked,
      onChange: this.handleDeleteAssetDocumentCheckBoxClicked
    }), /*#__PURE__*/_react.default.createElement(_ui.Text, {
      style: {
        margin: '0 10px'
      }
    }, "Delete video from dataset")), /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      columns: 2,
      gap: 2
    }, /*#__PURE__*/_react.default.createElement(_ui.Button, {
      mode: "ghost",
      tone: "default",
      text: "Cancel",
      onClick: this.handleCancelRemove,
      loading: !!this.state.isLoading
    }), /*#__PURE__*/_react.default.createElement(_ui.Button, {
      mode: "default",
      tone: "critical",
      text: "Remove",
      onClick: this.handleRemoveVideo,
      loading: !!this.state.isLoading
    }))))), this.state.error && /*#__PURE__*/_react.default.createElement(_InputError.default, {
      error: this.state.error,
      onClose: this.handleErrorClose
    })));
  }
});
exports.default = _default;
//# sourceMappingURL=Input.js.map