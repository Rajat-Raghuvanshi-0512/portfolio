"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VideoThumbnail = exports.ThumbGrid = exports.CardLoadMore = void 0;
var _components = require("@sanity/base/components");
var _icons = require("@sanity/icons");
var _ui = require("@sanity/ui");
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _suspendReact = require("suspend-react");
var _useErrorBoundary2 = require("use-error-boundary");
var _getPlaybackPolicy = require("../util/getPlaybackPolicy");
var _getPosterSrc = require("../util/getPosterSrc");
var _isSigned = require("../util/isSigned");
var _templateObject, _templateObject2, _templateObject3;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
var mediaDimensions = {
  aspect: 16 / 9
};
var ImageLoader = /*#__PURE__*/(0, _react.memo)(function ImageLoader(_ref) {
  var alt = _ref.alt,
    src = _ref.src,
    height = _ref.height,
    width = _ref.width;
  (0, _suspendReact.suspend)( /*#__PURE__*/_asyncToGenerator(function* () {
    var img = new Image(width, height);
    img.decoding = 'async';
    img.src = src;
    yield img.decode();
  }), ['sanity-plugin-mux-input', 'image', src]);
  return /*#__PURE__*/_react.default.createElement("img", {
    alt: alt,
    src: src,
    height: height,
    width: width
  });
});
var VideoMediaPreview = (0, _styledComponents.default)(_components.MediaPreview)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  img {\n    object-fit: cover;\n  }\n"])));
var VideoMediaPreviewSignedSubtitle = _ref3 => {
  var solo = _ref3.solo;
  return /*#__PURE__*/_react.default.createElement(_ui.Inline, {
    space: 1,
    style: {
      marginTop: solo ? '-1.35em' : undefined,
      marginBottom: solo ? undefined : '0.35rem'
    }
  }, /*#__PURE__*/_react.default.createElement(_icons.LockIcon, null), "Signed playback policy");
};
var PosterImage = _ref4 => {
  var asset = _ref4.asset,
    height = _ref4.height,
    width = _ref4.width,
    secrets = _ref4.secrets;
  var src = (0, _getPosterSrc.getPosterSrc)({
    asset,
    secrets,
    height,
    width,
    fit_mode: 'smartcrop'
  });
  var subtitle = (0, _react.useMemo)(() => (0, _isSigned.isSigned)(asset, secrets) ? /*#__PURE__*/_react.default.createElement(VideoMediaPreviewSignedSubtitle, {
    solo: true
  }) : undefined, [asset, secrets]);

  // eslint-disable-next-line no-warning-comments
  // @TODO support setting the alt text in the schema, like how we deal with images
  return /*#__PURE__*/_react.default.createElement(VideoMediaPreview, {
    mediaDimensions: mediaDimensions,
    subtitle: subtitle,
    title: /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, null),
    media: /*#__PURE__*/_react.default.createElement(ImageLoader, {
      alt: "",
      src: src,
      height: height,
      width: width
    })
  });
};
var VideoThumbnail = /*#__PURE__*/(0, _react.memo)(function VideoThumbnail(_ref5) {
  var asset = _ref5.asset,
    secrets = _ref5.secrets,
    width = _ref5.width;
  var _useErrorBoundary = (0, _useErrorBoundary2.useErrorBoundary)(),
    ErrorBoundary = _useErrorBoundary.ErrorBoundary,
    didCatch = _useErrorBoundary.didCatch,
    error = _useErrorBoundary.error;
  var height = Math.round(width * 9 / 16);
  var subtitle = (0, _react.useMemo)(() => (0, _getPlaybackPolicy.getPlaybackPolicy)(asset) === 'signed' ? /*#__PURE__*/_react.default.createElement(VideoMediaPreviewSignedSubtitle, null) : undefined, [asset]);
  if (didCatch) {
    return /*#__PURE__*/_react.default.createElement(VideoMediaPreview, {
      subtitle: error.message,
      mediaDimensions: mediaDimensions,
      title: "Error when loading thumbnail",
      media: /*#__PURE__*/_react.default.createElement(_ui.Card, {
        radius: 2,
        height: "fill",
        style: {
          position: 'relative',
          width: '100%'
        }
      }, /*#__PURE__*/_react.default.createElement(_ui.Box, {
        style: {
          display: 'flex',
          justifyContent: 'center',
          alignItems: 'center',
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0
        }
      }, /*#__PURE__*/_react.default.createElement(_icons.UnknownIcon, null)))
    });
  }
  return /*#__PURE__*/_react.default.createElement(ErrorBoundary, null, /*#__PURE__*/_react.default.createElement(_react.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement(VideoMediaPreview, {
      isPlaceholder: true,
      title: "Loading thumbnail...",
      subtitle: subtitle,
      mediaDimensions: mediaDimensions
    })
  }, /*#__PURE__*/_react.default.createElement(PosterImage, {
    asset: asset,
    secrets: secrets,
    height: height,
    width: width
  })));
});
exports.VideoThumbnail = VideoThumbnail;
var ThumbGrid = (0, _styledComponents.default)(_ui.Grid)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral(["\n  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));\n"])));
exports.ThumbGrid = ThumbGrid;
var CardLoadMore = (0, _styledComponents.default)(_ui.Card)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral(["\n  border-top: 1px solid var(--card-border-color);\n  position: sticky;\n  bottom: 0;\n  z-index: 200;\n"])));
exports.CardLoadMore = CardLoadMore;
//# sourceMappingURL=VideoSource.styles.js.map