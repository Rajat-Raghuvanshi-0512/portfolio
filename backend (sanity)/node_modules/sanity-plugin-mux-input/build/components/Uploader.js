"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ui = require("@sanity/ui");
var _react = _interopRequireWildcard(require("react"));
var _rxjs = require("rxjs");
var _operators = require("rxjs/operators");
var _upload = require("../actions/upload");
var _SanityClient = _interopRequireDefault(require("../clients/SanityClient"));
var _extractFiles = require("../util/extractFiles");
var _Player = _interopRequireDefault(require("./Player"));
var _Uploader = require("./Uploader.styles");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
class MuxVideoInputUploader extends _react.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "state", {
      isDraggingOver: false,
      invalidPaste: false,
      invalidFile: false,
      uploadProgress: null,
      fileInfo: null,
      uuid: null,
      error: null,
      url: null
    });
    _defineProperty(this, "dragEnteredEls", []);
    _defineProperty(this, "ctrlDown", false);
    _defineProperty(this, "upload", null);
    _defineProperty(this, "container", /*#__PURE__*/_react.default.createRef());
    _defineProperty(this, "onCancelUploadButtonClick$", void 0);
    _defineProperty(this, "handleCancelUploadButtonClick", void 0);
    _defineProperty(this, "handleProgress", evt => {
      this.setState({
        uploadProgress: evt.percent
      });
    });
    _defineProperty(this, "onUpload", files => {
      this.setState({
        uploadProgress: 0,
        fileInfo: null,
        uuid: null
      });
      this.upload = (0, _upload.uploadFile)(files[0], {
        enableSignedUrls: this.props.secrets.enableSignedUrls
      }).pipe((0, _operators.takeUntil)(this.onCancelUploadButtonClick$.pipe((0, _operators.tap)(() => {
        if (this.state.uuid) {
          _SanityClient.default.delete(this.state.uuid);
        }
      })))).subscribe({
        complete: () => {
          this.setState({
            error: null,
            uploadProgress: null,
            uuid: null
          });
        },
        next: event => {
          this.handleUploadEvent(event);
        },
        error: err => {
          this.setState({
            error: err,
            uploadProgress: null,
            uuid: null
          });
        }
      });
    });
    _defineProperty(this, "handleUploadEvent", event => {
      switch (event.type) {
        case 'success':
          return this.handleUploadSuccess(event.asset);
        case 'progress':
          return this.handleProgress(event);
        case 'file':
          return this.setState({
            fileInfo: event.file
          });
        case 'uuid':
          // Means we created a mux.videoAsset document with an uuid
          return this.setState({
            uuid: event.uuid
          });
        case 'url':
          return this.setState({
            url: event.url,
            uploadProgress: 100
          });
        default:
          return null;
      }
    });
    _defineProperty(this, "handleUploadSuccess", asset => {
      this.setState({
        uploadProgress: 100
      });
      this.props.onUploadComplete(asset);
    });
    _defineProperty(this, "handlePaste", event => {
      var clipboardData = event.clipboardData || window.clipboardData;
      var url = clipboardData.getData('text');
      var options = {
        enableSignedUrls: this.props.secrets.enableSignedUrls
      };
      this.upload = (0, _upload.uploadUrl)(url, options).subscribe({
        complete: () => {
          this.setState({
            error: null,
            uploadProgress: null,
            url: null
          });
        },
        next: sEvent => {
          this.handleUploadEvent(sEvent);
        },
        error: err => {
          var error;
          // Don't output error dialog when just invalid url
          if (!err.message.toLowerCase().match('invalid url')) {
            error = err;
          }
          this.setState({
            invalidPaste: true,
            error
          }, () => {
            setTimeout(() => {
              this.setState({
                invalidPaste: false,
                uploadProgress: null
              });
            }, 2000);
          });
        }
      });
    });
    _defineProperty(this, "handleDrop", event => {
      this.setState({
        isDraggingOver: false
      });
      event.preventDefault();
      event.stopPropagation();
      (0, _extractFiles.extractDroppedFiles)(event.nativeEvent.dataTransfer).then(files => {
        if (files) {
          // eslint-disable-next-line no-warning-comments
          // @TODO fix the typing on files
          this.onUpload(files);
        }
      });
    });
    _defineProperty(this, "handleDragOver", event => {
      event.preventDefault();
      event.stopPropagation();
    });
    _defineProperty(this, "handleDragEnter", event => {
      event.stopPropagation();
      this.dragEnteredEls.push(event.target);
      this.setState({
        isDraggingOver: true
      });
    });
    _defineProperty(this, "handleDragLeave", event => {
      event.stopPropagation();
      var idx = this.dragEnteredEls.indexOf(event.target);
      if (idx > -1) {
        this.dragEnteredEls.splice(idx, 1);
      }
      if (this.dragEnteredEls.length === 0) {
        this.setState({
          isDraggingOver: false
        });
      }
    });
    _defineProperty(this, "handleErrorClose", () => {
      if (this.state.uploadProgress !== null) {
        return;
      }
      this.setState({
        invalidFile: false,
        invalidPaste: false,
        error: null,
        uploadProgress: null
      }, () => {
        var _this$container$curre;
        return (_this$container$curre = this.container.current) === null || _this$container$curre === void 0 ? void 0 : _this$container$curre.focus();
      });
    });
    _defineProperty(this, "handleSetupButtonClicked", () => {
      this.handleErrorClose();
      this.props.onSetupButtonClicked();
    });
  }
  componentWillUnmount() {
    this.unSubscribeToUpload();
  }
  componentDidMount() {
    var events$ = new _rxjs.Subject();
    this.onCancelUploadButtonClick$ = events$.asObservable();
    this.handleCancelUploadButtonClick = event => events$.next(event);
  }
  unSubscribeToUpload() {
    if (this.upload && !this.upload.closed) {
      this.upload.unsubscribe();
    }
  }
  render() {
    var _this$props$asset, _this$props$asset$dat, _this$props$asset$dat2, _this$props$asset$dat3;
    if (this.state.uploadProgress !== null) {
      return /*#__PURE__*/_react.default.createElement(_Uploader.UploadProgress, {
        error: this.state.error,
        onCancel: this.handleCancelUploadButtonClick,
        progress: this.state.uploadProgress,
        fileInfo: this.state.fileInfo,
        url: this.state.url
      });
    }
    var isSigned = ((_this$props$asset = this.props.asset) === null || _this$props$asset === void 0 ? void 0 : (_this$props$asset$dat = _this$props$asset.data) === null || _this$props$asset$dat === void 0 ? void 0 : (_this$props$asset$dat2 = _this$props$asset$dat.playback_ids) === null || _this$props$asset$dat2 === void 0 ? void 0 : (_this$props$asset$dat3 = _this$props$asset$dat2[0]) === null || _this$props$asset$dat3 === void 0 ? void 0 : _this$props$asset$dat3.policy) === 'signed';
    return /*#__PURE__*/_react.default.createElement(_Uploader.UploadCard, {
      onBlur: this.props.onBlur,
      onFocus: this.props.onFocus,
      onDrop: this.handleDrop,
      onDragOver: this.handleDragOver,
      onDragLeave: this.handleDragLeave,
      onDragEnter: this.handleDragEnter,
      onPaste: this.handlePaste,
      ref: this.container
    }, this.state.error && /*#__PURE__*/_react.default.createElement(_Uploader.ErrorDialog, {
      message: this.state.error.message,
      onClose: this.handleErrorClose,
      onSetup: this.handleSetupButtonClicked
    }), this.props.asset ? /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 2
    }, isSigned && /*#__PURE__*/_react.default.createElement(_ui.Card, {
      padding: 3,
      radius: 2,
      shadow: 1,
      tone: "positive"
    }, /*#__PURE__*/_react.default.createElement(_ui.Text, {
      size: 1
    }, "This Mux asset is using a signed url.")), /*#__PURE__*/_react.default.createElement(_Player.default, {
      secrets: this.props.secrets,
      readOnly: this.props.readOnly,
      videoReadyToPlay: this.props.videoReadyToPlay,
      onBrowse: this.props.onBrowse,
      onRemove: this.props.onRemove,
      onUpload: this.onUpload,
      asset: this.props.asset,
      handleVideoReadyToPlay: this.props.handleVideoReadyToPlay,
      handleRemoveVideo: this.props.handleRemoveVideo
    })) : /*#__PURE__*/_react.default.createElement(_Uploader.UploadPlaceholder, {
      onBrowse: this.props.onBrowse,
      onUpload: this.onUpload,
      isDraggingOver: this.state.isDraggingOver,
      hasFocus: this.props.hasFocus,
      invalidPaste: this.state.invalidPaste,
      invalidFile: this.state.invalidFile
    }));
  }
}
var _default = MuxVideoInputUploader;
exports.default = _default;
//# sourceMappingURL=Uploader.js.map